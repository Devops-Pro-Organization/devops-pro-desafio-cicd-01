name: Pipeline de Build, Testes e SonarQube

on:
  workflow_call:

jobs:
  build:
    name: Compilação do Projeto
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Restauração de pacotes NuGet
        working-directory: ./src
        run: dotnet restore

      - name: Compilação do código
        working-directory: ./src
        run: dotnet build --configuration Release --no-restore

  unit-test:
    name: Teste de Unidade
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Execução do Teste de Unidade
        working-directory: ./src
        run: dotnet test Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj --configuration Release --no-build

  integration-test:
    name: Teste de Integração
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: review
          POSTGRES_PASSWORD: postgrespwd
          POSTGRES_DB: review-filmes
        ports:
          - 5432:5432
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Execução do Teste de Integração
        working-directory: ./src
        run: dotnet test Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj --configuration Release --no-build
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"

  sonarqube:
    name: Scan with SonarQube and SonarQube Quality Gate Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4 
  
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"
  
      # Executa o scanner do SonarQube
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
      # Aguarda a análise ser processada antes de verificar o Quality Gate
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
      # Falha a pipeline se o Quality Gate não for aprovado
      - name: Validar Quality Gate
        run: |
          if [[ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" != "PASSED" ]]; then
            echo "Erro: Quality Gate do SonarQube não aprovado!"
            exit 1
          fi