name: Execução de Testes

on:
  workflow_call:

jobs:
  unit-test:
    name: Teste de Unidade
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"
      - name: Execução do Teste de Unidade
        working-directory: ./src
        run: dotnet test Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj
  
  integration-test:
    name: Teste de Integração
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: review
          POSTGRES_PASSWORD: postgrespwd
          POSTGRES_DB: review-filmes
        ports:
          - 5432:5432
        #options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Execução do Teste de Integração
        working-directory: ./src
        run: dotnet test Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"

  sonarqube:
    name: Scan com o SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4 

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Instalando o SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo 'export PATH="$HOME/.dotnet/tools:$PATH"' >> $HOME/.bashrc
          source $HOME/.bashrc

      - name: Verificar estrutura do repositório
        run: ls -R

      - name: Restaurar dependências
        run: dotnet restore **/*.sln  # Especificando o arquivo de solução

      - name: Executar testes e gerar cobertura
        run: |
          dotnet test **/*.sln /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage/reports/SonarQube.xml

      - name: Executar Análise no SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin /k:"devops-pro-desafio-cicd-01" /o:"Devops-Pro-Organization" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN" /d:sonar.cs.opencover.reportsPaths=coverage/reports/SonarQube.xml
          dotnet build **/*.sln
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"



      
